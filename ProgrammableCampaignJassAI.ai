//===========================================================================
// 
//  ScrewTheTrees Programmable Jass AI
// 
//===========================================================================
globals
    integer pretendGold = 0
    integer pretendWood = 0
    integer foodUsed = 0
    integer foodCap = 0
    integer foodDifference = 0
	
	integer unitFoodCap = 0

    constant integer MAX_TOWN_COUNT = 12
 
endglobals

function IMax takes integer x, integer y returns integer
    if (x > y) then
        return x
    endif
    return y
endfunction
function IMin takes integer x, integer y returns integer
    if (x < y) then
        return x
    endif
    return y
endfunction
function B2S takes boolean b returns string
    if (b) then
        return "true"
    endif
    return "false"
endfunction
function ModuloInteger takes integer dividend, integer divisor returns integer
    local integer modulus = dividend - (dividend / divisor) * divisor

    if (modulus < 0) then
        set modulus = modulus + divisor
    endif

    return modulus
endfunction
function ModuloReal takes real dividend, real divisor returns real
    local real modulus = dividend - I2R(R2I(dividend / divisor)) * divisor

    if (modulus < 0) then
        set modulus = modulus + divisor
    endif

    return modulus
endfunction


function IBetween takes integer value, integer x, integer y returns boolean
    local integer max = IMax(x, y)
    local integer min = IMin(x, y)
    if (value >= min and value <= max) then
        return true
    endif
    return false
endfunction

function CanAffordUnit takes integer unitId, integer quantity returns boolean
    return (GetGold() > GetUnitGoldCost(unitId) * quantity and GetWood() > GetUnitWoodCost(unitId) * quantity)
endfunction
function HasHero takes nothing returns boolean
    return ((GetUnitCountDone(hero_id) > 0) or (GetUnitCountDone(hero_id2) > 0) or (GetUnitCountDone(hero_id3) > 0)) 
endfunction


function GetQueueWoodValue takes integer unitId,integer quantity returns integer
    local integer value = 0
    local integer needed = quantity - GetUnitCount(unitId)
    if (needed > 0) then
        set value = needed * GetUnitWoodCost(unitId)
    endif
    return value
endfunction
function GetQueueGoldValue takes integer unitId,integer quantity returns integer
    local integer value = 0
    local integer needed = quantity - GetUnitCount(unitId)
    if (needed > 0) then
        set value = needed * GetUnitGoldCost(unitId)
    endif
    return value
endfunction

function GetEnemyCount takes player whichPlayer returns integer
    local integer    playerIndex = 0
    local integer    count = 0
    local player     indexPlayer

    loop
        set indexPlayer = Player(playerIndex)

        if whichPlayer != indexPlayer then
            if not GetPlayerAlliance(whichPlayer,indexPlayer,ALLIANCE_PASSIVE) then
                if not GetPlayerAlliance(indexPlayer,whichPlayer,ALLIANCE_PASSIVE) then
                    if GetPlayerStructureCount(indexPlayer,true) > 0 then
                        set count = count + 1
                    endif
                endif
            endif
        endif
         
        set playerIndex = playerIndex + 1
        exitwhen playerIndex == 12
    endloop

    return count
endfunction
function IsUnitAllowedByFood takes integer unitid, integer quantity returns boolean
    if ((GetFoodUsed(unitid) * quantity) + foodUsed >= unitFoodCap) then
        return false
    endif
    return true
endfunction

function DebugPlayerName takes playercolor c returns string
    if (c == PLAYER_COLOR_RED) then
        return "red"
    elseif (c == PLAYER_COLOR_BLUE) then
        return "blue"
    elseif (c == PLAYER_COLOR_CYAN) then
        return "teal"
    elseif (c == PLAYER_COLOR_PURPLE) then
        return "purple"
    endif
    return "???"
endfunction
function DebugPlayerColorR takes playercolor c returns integer
    if (c == PLAYER_COLOR_RED) then
        return 254
    elseif (c == PLAYER_COLOR_BLUE) then
        return 0
    elseif (c == PLAYER_COLOR_CYAN) then
        return 0
    elseif (c == PLAYER_COLOR_PURPLE) then
        return 128
    endif
    return 0
endfunction
function DebugPlayerColorG takes playercolor c returns integer
    if (c == PLAYER_COLOR_RED) then
        return 0
    elseif (c == PLAYER_COLOR_BLUE) then
        return 0
    elseif (c == PLAYER_COLOR_CYAN) then
        return 254
    elseif (c == PLAYER_COLOR_PURPLE) then
        return 0
    endif
    return 0
endfunction
function DebugPlayerColorB takes playercolor c returns integer
    if (c == PLAYER_COLOR_RED) then
        return 0
    elseif (c == PLAYER_COLOR_BLUE) then
        return 255
    elseif (c == PLAYER_COLOR_CYAN) then
        return 255
    elseif (c == PLAYER_COLOR_PURPLE) then
        return 128
    endif
    return 0
endfunction
function Msg takes string msg returns nothing
    local integer i = 0
    set msg = DebugPlayerName(GetPlayerColor(ai_player)) + ": " + msg
    loop
        call DisplayTimedTextToPlayer(Player(i),0,0,30,msg)
        set i = i + 1
        exitwhen i == 3
    endloop
endfunction
function Ping takes real x, real y returns nothing
    local integer i = 0
    local integer r = DebugPlayerColorR(GetPlayerColor(ai_player))
    local integer g = DebugPlayerColorG(GetPlayerColor(ai_player))
    local integer b = DebugPlayerColorB(GetPlayerColor(ai_player))
    loop
        call PingMinimapEx(x, y, 1, r, g ,b, false)
        set i = i + 1
        exitwhen i == 3
    endloop
endfunction

function UpdateQueueVariables takes nothing returns nothing
    set pretendGold = GetGold()
    set pretendWood = GetWood()
    set foodUsed = FoodUsed()
    set foodCap = FoodCap()
    set foodDifference = FoodSpace()
endfunction

function QueueUnit takes integer unitid, integer quantity returns boolean
    return StartUnit(quantity, unitid, -1)
endfunction
function QueueBuilding takes integer unitid, integer quantity, integer town returns boolean
    return StartUnit(quantity, unitid, town)
endfunction
function QueueUpgrade takes integer upgrade, integer level returns boolean
    if (GetUpgradeLevel(upgrade) < level) then
        set level = GetUpgradeLevel(upgrade) + 1
    endif
    return StartUpgrade(level,upgrade)
endfunction
function QueueBuildingAllActiveTowns takes integer unitid, integer quantity returns boolean
    local integer i = 0
    local boolean retvar = false
     loop
        exitwhen i > MAX_TOWN_COUNT
        if (TownHasMine(i) and TownHasHall(i)) then
            call StartUnit( unitid, quantity, i )
            set retvar = true
        endif

        set i = i + 1
    endloop
    return retvar
endfunction
function QueueBuildingAllInactiveMines takes integer unitid, integer quantity returns boolean
    local integer i = 0
    local boolean retvar = false
     loop
        exitwhen i > MAX_TOWN_COUNT
        if (not TownHasMine(i) and TownHasHall(i) and i != GetNextExpansion()) then
            call StartUnit( unitid, quantity, i )
            set retvar = true
        endif

        set i = i + 1
    endloop
    return retvar
endfunction

function StreamUnit takes integer unitid, integer quantity returns boolean
    local integer count = IMin(GetUnitCount(unitid) + 1, quantity)
    if (count > GetUnitCount(unitid)) then
        if (IsUnitAllowedByFood(unitid, GetUnitCount(unitid) - count)) then
            return QueueUnit(unitid, count)
        endif
    endif
    return false
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
function HarvestPriorities takes nothing returns nothing
    local integer currentTown = TownWithMine()
    local integer i = 0

    call HarvestGold( currentTown, 3 )
    call HarvestWood( currentTown, 1 + insaneModifier)
    call HarvestGold( currentTown, 2 )
    loop
        exitwhen i > MAX_TOWN_COUNT
        if (GetTownUnitCount(ELF_MINE, i, true) > 0) then
            call HarvestGold( i, 5 )
        endif
        set i = i + 1
    endloop
    //call HarvestWood( -1, 25 )
endfunction

//===========================================================================
// Handles the necessary variables for expansion.
function StartExpansionNew takes nothing returns boolean
    local integer town
    local unit    peon
    local integer gold_cost

    set town = GetNextExpansion()
    if town == -1 then
        return true
    endif

    set gold_cost = GetUnitGoldCost(TREE_LIFE)
    if gold_cost > total_gold then
        set total_gold = IMax(total_gold - GetUnitGoldCost(TREE_LIFE), 0)
        return false
    else
        set total_gold = IMax(total_gold - GetUnitGoldCost(TREE_LIFE), 0)
    endif
    

    if GetExpansionFoe() != null then
        return true
    endif

    set peon = GetExpansionPeon()
    if peon != null then
        return SetExpansion(peon, TREE_LIFE)
    endif

    return true
endfunction


function IterateBuildings takes nothing returns nothing
    local integer currentTown = TownWithMine()

    call InitBuildArray()
    call UpdateQueueVariables()

    //call StartExpansionNew()

    call QueueBuildingAllInactiveMines(TREE_LIFE, 1)

endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================

function WorkerAssignment takes nothing returns nothing
    call StaggerSleep(0.5, 1)
    loop
        call Msg("HarvestPriorities")
        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        //Building
        call IterateBuildings(  )

        call Sleep( 0.25 )
    endloop
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================

function PrepareForces takes nothing returns nothing
    call AddAssault( GetUnitCountDone( KEEPER ), KEEPER )
    call AddAssault( GetUnitCountDone( MOON_BABE ), MOON_BABE )
    call AddAssault( GetUnitCountDone( DEMON_HUNTER ), DEMON_HUNTER )
    call AddAssault( GetUnitCountDone( WARDEN ), WARDEN )
    call AddAssault( GetUnitCountDone( 'earc' ), 'earc' )
    call AddAssault( GetUnitCountDone( 'echm' ), 'echm' )
    call AddAssault( GetUnitCountDone( 'edoc' ), 'edoc' )
    call AddAssault( GetUnitCountDone( 'edot' ), 'edot' )
    call AddAssault( GetUnitCountDone( 'edry' ), 'edry' )
    call AddAssault( GetUnitCountDone( 'efdr' ), 'efdr' )
    call AddAssault( GetUnitCountDone( 'ehip' ), 'ehip' )
    call AddAssault( GetUnitCountDone( 'ehpr' ), 'ehpr' )
    call AddAssault( GetUnitCountDone( 'emtg' ), 'emtg' )
    call AddAssault( GetUnitCountDone( 'esen' ), 'esen' )

    call AddAssault( GetUnitCountDone( BALLISTA ), BALLISTA )
endfunction

function AttackMoveKillANew takes unit target returns nothing
    local integer count = 0
    local integer iterator = 0
    local location l

    if target == null then
        call Sleep(1)
        return
    endif

    call AttackMoveKill(target)

    loop
        exitwhen CaptainRetreating()
        exitwhen CaptainReadinessHP() <= 25

        exitwhen not UnitAlive(target)
        exitwhen UnitInvis(target) and not IsUnitDetected(target,ai_player)

        set iterator = iterator + 1
        if (ModuloInteger(iterator, 5) == 0) then
            call Msg("  Regroup AMK")
            call SetAllianceTarget(target)

            if not(CaptainInCombat(true)) then //Update if there are changes in the forces or in combat.
                call Msg("  Prepare forces")
                call PrepareForces( )
            endif
            if (iterator >= 30) then //Reset and hardupdate
                call Msg("  Prepare and hardupdate")
                call PrepareForces( )
                set iterator = 0
            endif
        endif

        if not TownThreatened() then
            set l = GetUnitLoc(target)
            call Ping(GetLocationX(l), GetLocationY(l))
            call RemoveLocation(l)
            call AttackMoveKill(target)
        endif

        call Sleep(1)

        if sleep_seconds < -40 then
            if CaptainInCombat(true) then
                set sleep_seconds = sleep_seconds + 5
            else
                set sleep_seconds = 0
                call Msg("  Regroup sleep_seconds")
                call SetAllianceTarget(target)
                call PrepareForces(  )
                call FormGroup(1, false)
            endif
        endif
    endloop
    set iterator = 0
    //Sleep in combat
    loop
        loop
            exitwhen not CaptainInCombat(true)  // Captain is not in combat.
            exitwhen CaptainIsEmpty()           // Captain, we are dead?
            call SuicideSleep(1)
            set iterator = iterator + 1
            if (iterator >= 10) then
                call Msg("  Regroup SIC")
                call PrepareForces(  )
                set iterator = 0
            endif
        endloop

        set count = count + 1
        call Sleep(0.05)
        exitwhen count >= 8
    endloop
endfunction

function AnyPlayerAttackNew takes nothing returns boolean
    local unit hall

    if (CaptainReadinessHP() < 60 and CaptainReadinessMa() < 25) then
        call Msg("   - Not enough Readiness")
        return false
    endif

    set hall = GetEnemyExpansion()
    if hall == null then
        call StartGetEnemyBase()
        loop
            exitwhen not WaitGetEnemyBase()
            call SuicideSleep(1)
        endloop
        set hall = GetEnemyBase()
    else
        call Msg("Attack expansion.")
    endif
    if (hall == null) then
        return false
    endif
    call SetAllianceTarget(hall)
    call Msg("   - Found target, preparing.")
    call PrepareForces(  )
    call FormGroup(27, true)
    call Msg("   - Commencing attack.")
    call PrepareForces(  )
    call FormGroup(3, true)
    call AttackMoveKillANew(hall)
    return true
endfunction

function AttackCreepCamp takes integer minCreepLevel, integer maxCreepLevel, boolean allowAir returns nothing
    local unit target = GetCreepCamp(minCreepLevel, maxCreepLevel, allowAir)
    call FormGroup(2, true)
    if (target != null) then
        call AttackMoveKillANew(target)
        return
    endif
    call Msg("   - Target Null")
    call Sleep(2)
endfunction

function ProcessAttack takes nothing returns nothing
    local boolean hasAllies = GetAllyCount(ai_player) > 0
    local unit common
    local unit expansion_creep
    local unit expansion_hall
    local unit mega

    if TownThreatened() then //We cannot do shit anyway
        call Msg("Protecting town.")
        call Sleep(5)
        return
    endif

    loop
        exitwhen (CaptainReadinessHP() >= 50)
        call FormGroup(1,true)
        call Sleep(5)
    endloop

    //Coordinate with allies.
    if hasAllies then
        set common = GetAllianceTarget()
        if common != null then
            call Msg("Coordinating with allies.")
            call FormGroup(1,true)
            call AttackMoveKillANew(common)
            call SetAllianceTarget(null)
            call Sleep(5) //We are waiting for another player.
            return
        endif
    endif

    if (false) then
        call Msg("Want Expand.")
        set expansion_creep = GetExpansionFoe()
        if expansion_creep != null then
            call Msg("Found expansion_creep")
            call SetAllianceTarget(expansion_creep)
            call FormGroup(1,true)
            call AttackMoveKillANew(expansion_creep )
            return
        endif
        call Msg("  - No Expansion expansion creep found, already cleared.")
    endif

    set mega = GetMegaTarget()
    if mega != null then
        call Msg("MEGA TARGET!!!")
        call SetAllianceTarget(mega)
        call AttackMoveKillANew(mega)
        return
    endif

    if (false) then
        call Msg("Attack enemy base.")
        if (AnyPlayerAttackNew() == true) then
            return
        else
            call Msg("   - No base found, Is all enemies dead?")
        endif
    endif

    call Msg("Do normal creeping.")
    call AttackCreepCamp(1, 10, false)
endfunction

function AttackAssignment takes nothing returns nothing
    call StaggerSleep(1,3)
    loop
        call Msg("AttackAssignment")
        call RemoveInjuries(  )
        call PrepareForces(  )
        call ProcessAttack(  )
    endloop
endfunction

//===========================================================================
function SetConfigType takes integer configType, boolean value returns nothing

endfunction


function HandleCommand takes integer command, integer commandType returns nothing
    if commandType == PCJA_COMMAND_TYPE_SET_CONFIG then
        call Msg("PCJA_COMMAND_TYPE_SET_CONFIG")

    elseif command == 10001 then
        call Msg("PCJA_COMMAND_END_TYPE")
    else
        call Msg("OTHER")
    endif
endfunction

function NewerBuildLoop takes nothing returns nothing
    local integer command = 0
    local integer commandType = 0

    call OneBuildLoop()
    call StaggerSleep(0, 1)
    loop
        call OneBuildLoop()
        call Msg("NewerBuildLoop")

        loop
            exitwhen CommandsWaiting() <= 0
            set command = GetLastCommand()
            set commandType = GetLastData()
            call PopLastCommand()
            if command == 10000 then
                call HandleCommand(command, commandType)
            else
                call Msg("AI recieved command other than PCJA_COMMAND_START_TYPE")
            endif
        endloop

        call Sleep(0.5)
    endloop
endfunction

function InitOptions takes nothing returns nothing
    call SetCampaignAI(  )
    call SetDefendPlayer( false )
    call SetRandomPaths( true )
    call SetTargetHeroes( false )
    call SetPeonsRepair( true )
    call SetHeroesFlee( false )
    call SetHeroesBuyItems( false )
    call SetUnitsFlee( false )
    call SetGroupsFlee( false )
    call SetWatchMegaTargets( false )
    call SetIgnoreInjured( false )
    call SetHeroesTakeItems( false )
    call SetSlowChopping( false )
    call SetSmartArtillery( true )
    call GroupTimedLife( true )
endfunction


function main takes nothing returns nothing
    call InitAI()
    call InitOptions()
    call CreateCaptains()
    call SetHeroLevels(function SkillArrays) //TODO: Change

    call Sleep( 0.1 )

    call Msg("Start AI")

    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call NewerBuildLoop() //Main Loop

    call Msg("AI Main Thread Dead")
endfunction

